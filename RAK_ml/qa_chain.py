import json
import re
from deep_translator import GoogleTranslator
from langdetect import detect
from .llm import get_llm

# üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
def extract_json(text: str) -> dict:
    try:
        match = re.search(r"\{[\s\S]*\}", text)
        if not match:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫")
        return json.loads(match.group(0))
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM:\n")
        print(text)
        print(f"\n‚úâÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return {
            "answer": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
            "analysis": "",
            "sources": []
        }

# üìò –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
def translate_to_russian(text: str) -> str:
    return GoogleTranslator(source='auto', target='ru').translate(text)

# üåê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
def is_english(text: str) -> bool:
    try:
        return detect(text) == "en"
    except:
        return False

# üß† –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
def generate_answer(question: str, chunks: list, provider: str = "openai") -> str:
    llm = get_llm(provider)
    context = "\n\n".join(chunks)

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ê–û ¬´–ù–ö ¬´“ö–¢–ñ¬ª, –æ–±–ª–∞–¥–∞—é—â–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ –∞–∫—Ç—ã, –≤—ã—è–≤–ª—è—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –∏ –≥–ª–∞–≤–∞–º–∏, –∏ –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.

## –¶–µ–ª—å
–î–∞–π –ø–æ–ª–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å—Ç—Ä–æ–≥–æ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
–¢—ã –¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫, –∞ –∫–∞–∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π:
- –Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –Ω–æ—Ä–º—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å;
- —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤;
- –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª, —á—Ç–æ –∏ –∫–∞–∫ –µ–º—É –¥–µ–ª–∞—Ç—å.

## –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π context –≤ —Å–≤—è–∑–∏ —Å question.
2. –í—ã–¥–µ–ª–∏ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (sources), –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –∏—Ö –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π.
3. –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ç–∞–∫–æ–π –≤—ã–≤–æ–¥ (analysis).
4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç (answer).
5. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–Ω–µ —Ç–µ–º–∞—Ç–∏–∫–∏ ‚Äî –≤–µ—Ä–Ω–∏:
   {{"analysis":"","sources":[],"answer":"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."}}
6. –ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏:
   {{"analysis":"","sources":[],"answer":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ."}}

## –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "answer": "...",     
  "analysis": "...",    
  "sources": [{{"filename": "...", "page": ..., "citation": "..."}}]
}}

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å: {question}
–û—Ç–≤–µ—Ç:
"""

    raw = llm.chat(prompt)
    parsed = extract_json(raw)

    answer = parsed.get("answer", "").strip()
    analysis = parsed.get("analysis", "").strip()
    sources = parsed.get("sources", [])

    sources_str = ", ".join(
        f'{src.get("filename", "??")} —Å—Ç—Ä. {src.get("page", "?")}'
        for src in sources
    ) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    output = f"""‚úÖ –û—Ç–≤–µ—Ç: {answer}

üß† –ê–Ω–∞–ª–∏–∑: {analysis}

üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_str}
"""

    return translate_to_russian(output) if is_english(output) else output
